{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext } from \"react\";\nimport classNames from \"classnames\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\"; // @material-ui/icons\n\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\"; // core components\n\nimport styles from \"assets/jss/nextjs-material-dashboard/components/customInputStyle.js\";\nimport { ThemeContext } from \"../../context/ThemeContextProvider\";\nexport default function CustomInput(props) {\n  var _classNames, _classNames2;\n\n  var useStyles = makeStyles(styles);\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme,\n      setTheme = _useContext.setTheme;\n\n  var classes = useStyles(theme);\n  var formControlProps = props.formControlProps,\n      labelText = props.labelText,\n      id = props.id,\n      labelProps = props.labelProps,\n      inputProps = props.inputProps,\n      error = props.error,\n      success = props.success,\n      moreInputProps = props.moreInputProps;\n  var labelClasses = classNames((_classNames = {}, _defineProperty(_classNames, \" \" + classes.labelRootError, error), _defineProperty(_classNames, \" \" + classes.labelRootSuccess, success && !error), _classNames));\n  var underlineClasses = classNames((_classNames2 = {}, _defineProperty(_classNames2, classes.underlineError, error), _defineProperty(_classNames2, classes.underlineSuccess, success && !error), _defineProperty(_classNames2, classes.underline, true), _classNames2));\n  var marginTop = classNames(_defineProperty({}, classes.marginTop, labelText === undefined));\n  return /*#__PURE__*/_jsxs(FormControl, _objectSpread(_objectSpread({}, formControlProps), {}, {\n    className: formControlProps.className + \" \" + classes.formControl,\n    children: [labelText !== undefined ? /*#__PURE__*/_jsx(InputLabel, _objectSpread(_objectSpread({\n      className: classes.labelRoot + labelClasses,\n      htmlFor: id\n    }, labelProps), {}, {\n      children: labelText\n    })) : null, /*#__PURE__*/_jsx(Input, _objectSpread(_objectSpread({\n      classes: {\n        root: marginTop,\n        disabled: classes.disabled,\n        underline: underlineClasses\n      },\n      id: id\n    }, inputProps), {}, {\n      inputProps: moreInputProps\n    })), error ? /*#__PURE__*/_jsx(Clear, {\n      className: classes.feedback + \" \" + classes.labelRootError\n    }) : success ? /*#__PURE__*/_jsx(Check, {\n      className: classes.feedback + \" \" + classes.labelRootSuccess\n    }) : null]\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}