{"ast":null,"code":"/* Takes array of objects, returns array of objects \r\narray = [{\r\n        key: \"asd\",\r\n        name: \"name\"\r\n    },\r\n    {\r\n        key: \"asd2\",\r\n        name: \"name\"\r\n    }\r\n] \r\nReturn = [{\r\n        key: \"asd\",\r\n        content: [\r\n            {\r\n                key: \"asd\",\r\n                name: \"name\"\r\n            }   \r\n        ]\r\n    },\r\n    {\r\n        key: \"asd2\",\r\n        content: [\r\n            {\r\n                key: \"asd2\",\r\n                name: \"name\"\r\n            }   \r\n        ]\r\n    }\r\n] \r\n*/\nexport function groupBy(array, key) {\n  const map = new Map();\n  array.forEach(element => {\n    if (map.has(element[key])) {\n      map.get(element[key]).push(element);\n    } else {\n      map.set(element[key], [element]);\n    }\n  });\n  const result = [];\n\n  for (const [keyValue, elements] of map) {\n    result.push({\n      [key]: keyValue,\n      content: elements\n    });\n  }\n\n  return result;\n}","map":{"version":3,"sources":["C:/DATOS/THISYS/SISTEMA/PORTAL WEB/Proyecto-Salud/utils/algorithms.js"],"names":["groupBy","array","key","map","Map","forEach","element","has","get","push","set","result","keyValue","elements","content"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,GAAxB,EAA6B;AAChC,QAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;AAEAH,EAAAA,KAAK,CAACI,OAAN,CAAcC,OAAO,IAAI;AACrB,QAAIH,GAAG,CAACI,GAAJ,CAAQD,OAAO,CAACJ,GAAD,CAAf,CAAJ,EAA2B;AACvBC,MAAAA,GAAG,CAACK,GAAJ,CAAQF,OAAO,CAACJ,GAAD,CAAf,EAAsBO,IAAtB,CAA2BH,OAA3B;AACH,KAFD,MAGK;AACDH,MAAAA,GAAG,CAACO,GAAJ,CAAQJ,OAAO,CAACJ,GAAD,CAAf,EAAsB,CAACI,OAAD,CAAtB;AACH;AACJ,GAPD;AASA,QAAMK,MAAM,GAAG,EAAf;;AAEA,OAAK,MAAM,CAACC,QAAD,EAAWC,QAAX,CAAX,IAAmCV,GAAnC,EAAwC;AACpCQ,IAAAA,MAAM,CAACF,IAAP,CAAY;AACR,OAACP,GAAD,GAAOU,QADC;AAERE,MAAAA,OAAO,EAAED;AAFD,KAAZ;AAIH;;AAED,SAAOF,MAAP;AACH","sourcesContent":["/* Takes array of objects, returns array of objects \r\narray = [{\r\n        key: \"asd\",\r\n        name: \"name\"\r\n    },\r\n    {\r\n        key: \"asd2\",\r\n        name: \"name\"\r\n    }\r\n] \r\nReturn = [{\r\n        key: \"asd\",\r\n        content: [\r\n            {\r\n                key: \"asd\",\r\n                name: \"name\"\r\n            }   \r\n        ]\r\n    },\r\n    {\r\n        key: \"asd2\",\r\n        content: [\r\n            {\r\n                key: \"asd2\",\r\n                name: \"name\"\r\n            }   \r\n        ]\r\n    }\r\n] \r\n*/\r\nexport function groupBy(array, key) {\r\n    const map = new Map();\r\n\r\n    array.forEach(element => {\r\n        if (map.has(element[key])) {\r\n            map.get(element[key]).push(element);\r\n        }\r\n        else {\r\n            map.set(element[key], [element]);\r\n        }\r\n    });\r\n\r\n    const result = [];\r\n\r\n    for (const [keyValue, elements] of map) {\r\n        result.push({\r\n            [key]: keyValue,\r\n            content: elements\r\n        })\r\n    }\r\n\r\n    return result;\r\n}"]},"metadata":{},"sourceType":"module"}