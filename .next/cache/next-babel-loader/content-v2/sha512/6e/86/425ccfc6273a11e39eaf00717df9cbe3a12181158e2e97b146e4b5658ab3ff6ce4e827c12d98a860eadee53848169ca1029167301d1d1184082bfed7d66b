{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { DELETE } from \"./FETCH.JS\";\nimport { POST } from \"./FETCH.JS\";\nimport { GET } from \"./FETCH.JS\";\nexport function getNextTurns(_x, _x2, _x3) {\n  return _getNextTurns.apply(this, arguments);\n}\n\nfunction _getNextTurns() {\n  _getNextTurns = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(patientId, consultorioId, token) {\n    var nextTurnsResponse, response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return GET(consultorioId, token, \"turns/next?patientId=\" + patientId);\n\n          case 3:\n            response = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 6;\n              break;\n            }\n\n            throw Error(\"\");\n\n          case 6:\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            data = _context.sent;\n            //Si falla al pedir los datos va al catch\n            nextTurnsResponse = {\n              success: true,\n              data: data\n            };\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            nextTurnsResponse = {\n              success: false,\n              message: _context.t0.message\n            };\n\n          case 15:\n            return _context.abrupt(\"return\", nextTurnsResponse);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 12]]);\n  }));\n  return _getNextTurns.apply(this, arguments);\n}\n\nexport function getProfessionals(_x4, _x5) {\n  return _getProfessionals.apply(this, arguments);\n}\n\nfunction _getProfessionals() {\n  _getProfessionals = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(consultorioId, token) {\n    var professionalsResponse, response, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            console.log({\n              token: token\n            });\n            _context2.next = 4;\n            return GET(consultorioId, token, \"professionals\");\n\n          case 4:\n            response = _context2.sent;\n            console.log(response);\n\n            if (!(response.status !== 200)) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw Error(\"\");\n\n          case 8:\n            _context2.next = 10;\n            return response.json();\n\n          case 10:\n            data = _context2.sent;\n            //Si falla al pedir los datos va al catch\n            professionalsResponse = {\n              success: true,\n              data: data\n            };\n            _context2.next = 17;\n            break;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](0);\n            professionalsResponse = {\n              success: false,\n              message: _context2.t0.message\n            };\n\n          case 17:\n            return _context2.abrupt(\"return\", professionalsResponse);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 14]]);\n  }));\n  return _getProfessionals.apply(this, arguments);\n}\n\nexport function getEspecialidades(_x6, _x7) {\n  return _getEspecialidades.apply(this, arguments);\n}\n\nfunction _getEspecialidades() {\n  _getEspecialidades = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(consultorioId, token) {\n    var especialidadesResponse, response, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            console.log({\n              token: token\n            });\n            _context3.next = 4;\n            return GET(consultorioId, token, \"especialidades\");\n\n          case 4:\n            response = _context3.sent;\n            console.log(response);\n\n            if (!(response.status !== 200)) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw Error(\"\");\n\n          case 8:\n            _context3.next = 10;\n            return response.json();\n\n          case 10:\n            data = _context3.sent;\n            //Si falla al pedir los datos va al catch\n            especialidadesResponse = {\n              success: true,\n              data: data\n            };\n            _context3.next = 17;\n            break;\n\n          case 14:\n            _context3.prev = 14;\n            _context3.t0 = _context3[\"catch\"](0);\n            especialidadesResponse = {\n              success: false,\n              message: _context3.t0.message\n            };\n\n          case 17:\n            return _context3.abrupt(\"return\", especialidadesResponse);\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 14]]);\n  }));\n  return _getEspecialidades.apply(this, arguments);\n}\n\nexport function getSucursales(_x8, _x9) {\n  return _getSucursales.apply(this, arguments);\n}\n\nfunction _getSucursales() {\n  _getSucursales = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(consultorioId, token) {\n    var sucursalesResponse, response, data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            console.log({\n              token: token\n            });\n            _context4.next = 4;\n            return GET(consultorioId, token, \"sucursales\");\n\n          case 4:\n            response = _context4.sent;\n            console.log(response);\n\n            if (!(response.status !== 200)) {\n              _context4.next = 8;\n              break;\n            }\n\n            throw Error(\"\");\n\n          case 8:\n            _context4.next = 10;\n            return response.json();\n\n          case 10:\n            data = _context4.sent;\n            //Si falla al pedir los datos va al catch\n            sucursalesResponse = {\n              success: true,\n              data: data\n            };\n            _context4.next = 17;\n            break;\n\n          case 14:\n            _context4.prev = 14;\n            _context4.t0 = _context4[\"catch\"](0);\n            sucursalesResponse = {\n              success: false,\n              message: _context4.t0.message\n            };\n\n          case 17:\n            return _context4.abrupt(\"return\", sucursalesResponse);\n\n          case 18:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 14]]);\n  }));\n  return _getSucursales.apply(this, arguments);\n}\n\nexport function getAvailableTurns(_x10, _x11, _x12, _x13, _x14, _x15) {\n  return _getAvailableTurns.apply(this, arguments);\n}\n\nfunction _getAvailableTurns() {\n  _getAvailableTurns = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(consultorioId, token, sucursalId, especialidadId, profesionalId, patientId) {\n    var turnsResponse, response, json, data;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return GET(consultorioId, token, \"turns/available?sucursalId=\".concat(sucursalId, \"&especialidadId=\").concat(especialidadId, \"&profesionalId=\").concat(profesionalId, \"&pacienteId=\").concat(patientId));\n\n          case 3:\n            response = _context5.sent;\n\n            if (!(response.status !== 200)) {\n              _context5.next = 13;\n              break;\n            }\n\n            if (!response.headers.get(\"content-type\").includes(\"application/json\")) {\n              _context5.next = 12;\n              break;\n            }\n\n            _context5.next = 8;\n            return response.json();\n\n          case 8:\n            json = _context5.sent;\n            throw Error(json.detail);\n\n          case 12:\n            throw Error(\"\");\n\n          case 13:\n            _context5.next = 15;\n            return response.json();\n\n          case 15:\n            data = _context5.sent;\n            //Si falla al pedir los datos va al catch\n            turnsResponse = {\n              success: true,\n              data: data\n            };\n            _context5.next = 22;\n            break;\n\n          case 19:\n            _context5.prev = 19;\n            _context5.t0 = _context5[\"catch\"](0);\n            turnsResponse = {\n              success: false,\n              message: _context5.t0.message\n            };\n\n          case 22:\n            return _context5.abrupt(\"return\", turnsResponse);\n\n          case 23:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 19]]);\n  }));\n  return _getAvailableTurns.apply(this, arguments);\n}\n\nexport function requestTurn(_x16, _x17, _x18) {\n  return _requestTurn.apply(this, arguments);\n}\n\nfunction _requestTurn() {\n  _requestTurn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(consultorioId, token, _ref) {\n    var fecha, hora, pacienteId, horarioId, turnsResponse, response, json, data;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            fecha = _ref.fecha, hora = _ref.hora, pacienteId = _ref.patienteId, horarioId = _ref.horarioId;\n            console.log({\n              fecha: fecha,\n              hora: hora,\n              patienteId: pacienteId,\n              horarioId: horarioId\n            });\n            _context6.prev = 2;\n            _context6.next = 5;\n            return POST(consultorioId, token, \"turns\", {\n              fecha: fecha,\n              hora: hora,\n              pacienteId: pacienteId,\n              horarioId: horarioId\n            });\n\n          case 5:\n            response = _context6.sent;\n            console.log(response.headers.get(\"content-type\"));\n\n            if (!(response.status !== 200)) {\n              _context6.next = 16;\n              break;\n            }\n\n            if (!response.headers.get(\"content-type\").includes(\"application/json\")) {\n              _context6.next = 15;\n              break;\n            }\n\n            _context6.next = 11;\n            return response.json();\n\n          case 11:\n            json = _context6.sent;\n            throw Error(json.detail);\n\n          case 15:\n            throw Error(\"\");\n\n          case 16:\n            _context6.next = 18;\n            return response.json();\n\n          case 18:\n            data = _context6.sent;\n            //Si falla al pedir los datos va al catch\n            turnsResponse = {\n              success: true,\n              data: data\n            };\n            _context6.next = 26;\n            break;\n\n          case 22:\n            _context6.prev = 22;\n            _context6.t0 = _context6[\"catch\"](2);\n            console.dir({\n              err: _context6.t0\n            });\n            turnsResponse = {\n              success: false,\n              message: _context6.t0.message\n            };\n\n          case 26:\n            return _context6.abrupt(\"return\", turnsResponse);\n\n          case 27:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[2, 22]]);\n  }));\n  return _requestTurn.apply(this, arguments);\n}\n\nexport function cancelTurn(_x19, _x20, _x21) {\n  return _cancelTurn.apply(this, arguments);\n}\n\nfunction _cancelTurn() {\n  _cancelTurn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(consultorioId, token, turnId) {\n    var turnsResponse, response, json, data;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return DELETE(consultorioId, token, \"turns/\" + turnId);\n\n          case 3:\n            response = _context7.sent;\n            console.log(response.headers.get(\"content-type\"));\n\n            if (!(response.status !== 200)) {\n              _context7.next = 14;\n              break;\n            }\n\n            if (!response.headers.get(\"content-type\").includes(\"application/json\")) {\n              _context7.next = 13;\n              break;\n            }\n\n            _context7.next = 9;\n            return response.json();\n\n          case 9:\n            json = _context7.sent;\n            throw Error(json.detail);\n\n          case 13:\n            throw Error(\"\");\n\n          case 14:\n            _context7.next = 16;\n            return response.json();\n\n          case 16:\n            data = _context7.sent;\n            //Si falla al pedir los datos va al catch\n            turnsResponse = {\n              success: true,\n              data: data\n            };\n            _context7.next = 24;\n            break;\n\n          case 20:\n            _context7.prev = 20;\n            _context7.t0 = _context7[\"catch\"](0);\n            console.dir({\n              err: _context7.t0\n            });\n            turnsResponse = {\n              success: false,\n              message: _context7.t0.message\n            };\n\n          case 24:\n            return _context7.abrupt(\"return\", turnsResponse);\n\n          case 25:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[0, 20]]);\n  }));\n  return _cancelTurn.apply(this, arguments);\n}\n\nexport function getTurnsHistory(_x22, _x23, _x24) {\n  return _getTurnsHistory.apply(this, arguments);\n}\n\nfunction _getTurnsHistory() {\n  _getTurnsHistory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(consultorioId, token, patientId) {\n    var turnsResponse, response, json, data;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return GET(consultorioId, token, \"turns?patientId=\" + patientId);\n\n          case 3:\n            response = _context8.sent;\n            console.log(response.headers.get(\"content-type\"));\n\n            if (!(response.status !== 200)) {\n              _context8.next = 14;\n              break;\n            }\n\n            if (!response.headers.get(\"content-type\").includes(\"application/json\")) {\n              _context8.next = 13;\n              break;\n            }\n\n            _context8.next = 9;\n            return response.json();\n\n          case 9:\n            json = _context8.sent;\n            throw Error(json.detail);\n\n          case 13:\n            throw Error(\"\");\n\n          case 14:\n            _context8.next = 16;\n            return response.json();\n\n          case 16:\n            data = _context8.sent;\n            //Si falla al pedir los datos va al catch\n            turnsResponse = {\n              success: true,\n              data: data.filter(function (turn) {\n                return turn.estado !== \"Pendiente\";\n              })\n            };\n            _context8.next = 24;\n            break;\n\n          case 20:\n            _context8.prev = 20;\n            _context8.t0 = _context8[\"catch\"](0);\n            console.dir({\n              err: _context8.t0\n            });\n            turnsResponse = {\n              success: false,\n              message: _context8.t0.message\n            };\n\n          case 24:\n            return _context8.abrupt(\"return\", turnsResponse);\n\n          case 25:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[0, 20]]);\n  }));\n  return _getTurnsHistory.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}