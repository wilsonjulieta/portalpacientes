{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* Takes array of objects, returns array of objects \r\narray = [{\r\n        key: \"asd\",\r\n        name: \"name\"\r\n    },\r\n    {\r\n        key: \"asd2\",\r\n        name: \"name\"\r\n    }\r\n] \r\nReturn = [{\r\n        key: \"asd\",\r\n        content: [\r\n            {\r\n                key: \"asd\",\r\n                name: \"name\"\r\n            }   \r\n        ]\r\n    },\r\n    {\r\n        key: \"asd2\",\r\n        content: [\r\n            {\r\n                key: \"asd2\",\r\n                name: \"name\"\r\n            }   \r\n        ]\r\n    }\r\n] \r\n*/\nexport function groupBy(array, key) {\n  var map = new Map();\n  array.forEach(function (element) {\n    if (map.has(element[key])) {\n      map.get(element[key]).push(element);\n    } else {\n      map.set(element[key], [element]);\n    }\n  });\n  var result = [];\n\n  var _iterator = _createForOfIteratorHelper(map),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _result$push;\n\n      var _step$value = _slicedToArray(_step.value, 2),\n          keyValue = _step$value[0],\n          elements = _step$value[1];\n\n      result.push((_result$push = {}, _defineProperty(_result$push, key, keyValue), _defineProperty(_result$push, \"content\", elements), _result$push));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n} // Recibe el arreglo nextTurns, lo devuelve separado en arreglos por mes. Ejemplo: [{mes: 7, turnos: [...]}, {mes: 9, turnos: [...]}]\n\nexport function parseTurns(turns) {\n  var nextTurnsMap = new Map();\n\n  var _iterator2 = _createForOfIteratorHelper(turns),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var turn = _step2.value;\n      var monthNumber = Number(turn.fecha.split(\"-\")[0]);\n      var yearNumber = Number(turn.fecha.split(\"-\")[2]);\n\n      if (nextTurnsMap.has(monthNumber + \"/\" + yearNumber)) {\n        nextTurnsMap.get(monthNumber + \"/\" + yearNumber).push(turn);\n      } else {\n        nextTurnsMap.set(monthNumber + \"/\" + yearNumber, [turn]);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var nextTurnsParsed = [];\n\n  var _iterator3 = _createForOfIteratorHelper(nextTurnsMap),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          monthAndYear = _step3$value[0],\n          _turns = _step3$value[1];\n\n      nextTurnsParsed.push({\n        monthNumber: Number(monthAndYear.split(\"/\")[0]),\n        yearNumber: Number(monthAndYear.split(\"/\")[1]),\n        turns: _turns\n      });\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  nextTurnsParsed.sort(function (a, b) {\n    if (b.yearNumber < a.yearNumber) return -1;\n    if (b.yearNumber > a.yearNumber) return 1;\n    return b.monthNumber - a.monthNumber;\n  });\n  return nextTurnsParsed;\n}","map":null,"metadata":{},"sourceType":"module"}