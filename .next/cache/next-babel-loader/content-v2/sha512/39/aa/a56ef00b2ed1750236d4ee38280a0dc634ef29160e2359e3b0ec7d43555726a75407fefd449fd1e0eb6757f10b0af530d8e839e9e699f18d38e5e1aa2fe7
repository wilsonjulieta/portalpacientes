{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useState } from \"react\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\"; // layout for this page\n\nimport Admin from \"layouts/Admin.js\"; // core components\n\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardAvatar from \"components/Card/CardAvatar.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport avatar from \"assets/img/placeholderPic.jpg\";\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormHelperText, List, ListItem, ListItemAvatar, ListItemText, MenuItem, NativeSelect, Select } from \"@material-ui/core\";\nimport useTheme from \"../../../hooks/useTheme\";\nimport CalendarIcon from '@material-ui/icons/Today';\nimport PersonIcon from '@material-ui/icons/Person';\nimport CreateIcon from '@material-ui/icons/Create';\nimport AddIcon from '@material-ui/icons/Add';\nimport PlaceIcon from '@material-ui/icons/Place';\nimport adminStyles from \"assets/jss/nextjs-material-dashboard/layouts/adminStyle.js\";\nimport { showLoad } from \"../../../utils/loading\";\nimport { useEffect } from \"react\";\nimport { TURNOS_DISPONIBLES } from \"../../../utils/mockData\";\nimport { useRef } from \"react\";\nimport MUIButton from \"@material-ui/core/Button\";\nimport SendIcon from '@material-ui/icons/Send';\nimport { resetFocus } from \"../../../utils/focus\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport nookies from 'nookies';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport { getAvailableTurns, getEspecialidades, getProfessionals, getSucursales, requestTurn } from \"../../../services/turns\";\nimport GLOBAL_GET_TOKEN from \"../../../utils/token\";\nimport MessageDialog from \"../../../components/Dialogs/MessageDialog\";\nimport { groupBy } from \"../../../utils/algorithms\";\nimport { UserContext } from \"../../../context/UserContextProvider\";\nimport { fullDateToDayMonth, getFullNameOfDate } from \"../../../utils/dates\";\nimport { MessageDialogContext } from \"../../../context/MessageDialogContextProvider\";\nimport { useRouter } from \"next/router\";\nimport LoadingSpinner from \"../../../components/Utils/LoadingSpinner\";\nexport async function getServerSideProps(context) {\n  const {\n    consultorioId\n  } = context.query;\n  const cookies = nookies.get(context);\n  const professionalsResponse = await getProfessionals(consultorioId, await GLOBAL_GET_TOKEN(context));\n\n  if (!professionalsResponse.success) {\n    return {\n      redirect: {\n        destination: '/login/' + consultorioId + \"/server-error\",\n        permanent: false\n      }\n    };\n  }\n\n  const especialidadesResponse = await getEspecialidades(consultorioId, await GLOBAL_GET_TOKEN(context));\n\n  if (!especialidadesResponse.success) {\n    return {\n      redirect: {\n        destination: '/login/' + consultorioId + \"/server-error\",\n        permanent: false\n      }\n    };\n  }\n\n  const sucursalesResponse = await getSucursales(consultorioId, await GLOBAL_GET_TOKEN(context));\n\n  if (!sucursalesResponse.success) {\n    return {\n      redirect: {\n        destination: '/login/' + consultorioId + \"/server-error\",\n        permanent: false\n      }\n    };\n  }\n\n  return {\n    props: {\n      consultorioId,\n      professionals: professionalsResponse.data,\n      especialidades: especialidadesResponse.data,\n      sucursales: sucursalesResponse.data\n    }\n  };\n}\n\nconst styles = _objectSpread(_objectSpread({}, adminStyles()), {}, {\n  cardCategoryWhite: {\n    color: \"rgba(255,255,255,.62)\",\n    margin: \"0\",\n    fontSize: \"14px\",\n    marginTop: \"0\",\n    marginBottom: \"0\"\n  },\n  cardTitleWhite: {\n    color: \"#FFFFFF\",\n    marginTop: \"0px\",\n    minHeight: \"auto\",\n    fontWeight: \"300\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: \"3px\",\n    textDecoration: \"none\"\n  },\n  description: {\n    fontSize: \"1.25rem\"\n  },\n  colorPrimary: {\n    color: props => props.colorPrimary\n  },\n  profesionalImg: {\n    width: \"10%\",\n    border: props => \"1px solid \" + props.colorPrimary,\n    borderRadius: \"100%\"\n  }\n});\n\nfunction SolicitarTurno({\n  professionals,\n  especialidades,\n  sucursales,\n  consultorioId\n}) {\n  const classes = useTheme(styles);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  console.log({\n    professionals,\n    especialidades,\n    sucursales\n  });\n  const messageDialog = useContext(MessageDialogContext);\n  const {\n    user\n  } = useContext(UserContext);\n  const showConsultasMessage = useRef(true);\n  useEffect(() => {\n    if (user.consultorioId === \"1\" && !localStorage.getItem(\"messageTurnosConsulta\")) {\n      showConsultasMessage.current = false;\n      localStorage.setItem(\"messageTurnosConsulta\", \"true\");\n      messageDialog.messageOpen(\"Los turnos que se obtienen son solo para consulta, para otros estudios comunicarse telefónicamente.\", \"Información\");\n    }\n  }, []);\n  /* DIALOG VERIFICACION */\n\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n\n  const handleClose = () => {// Do something when the dialog is closed\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  /* DIALOG VERIFICACION */\n\n\n  const {\n    0: turnsGrouped,\n    1: setTurnsGrouped\n  } = useState([]);\n  const {\n    0: turnSelected,\n    1: setTurnSelected\n  } = useState({});\n  const {\n    0: especialidadId,\n    1: setEspecialidadId\n  } = useState(\"\");\n  const {\n    0: profesionalId,\n    1: setProfesionalId\n  } = useState(\"\");\n  const {\n    0: sucursalId,\n    1: setSucursalId\n  } = useState(\"\");\n\n  const resetFilters = () => {\n    setEspecialidadId(\"\");\n    setProfesionalId(\"\");\n    setSucursalId(\"\");\n    setTurnsGrouped([]);\n  };\n\n  const professionalsFiltered = professionals.filter(professional => especialidadId === \"\" || professional.specialty.id === especialidadId);\n  useEffect(() => {\n    async function getTurns() {\n      var _groupBy, _groupBy$map;\n\n      setLoading(true);\n      const turnsResponse = await getAvailableTurns(consultorioId, await GLOBAL_GET_TOKEN(), sucursalId, especialidadId, profesionalId, user.id);\n      setLoading(false);\n\n      if (!turnsResponse.success) {\n        messageDialog.warningOpen(turnsResponse.message);\n        return;\n      }\n\n      const turns = turnsResponse.data; // Agrupar turnos\n\n      const turnsGrouped = (_groupBy = groupBy(turns, \"sucursal\")) === null || _groupBy === void 0 ? void 0 : (_groupBy$map = _groupBy.map(group => ({\n        sucursal: group.sucursal,\n        content: group.content.slice(0, 10)\n      }))) === null || _groupBy$map === void 0 ? void 0 : _groupBy$map.sort((a, b) => a.sucursal.localeCompare(b.sucursal));\n      console.log({\n        turns,\n        turnsGrouped\n      });\n      setTurnsGrouped(turnsGrouped !== null && turnsGrouped !== void 0 ? turnsGrouped : []);\n    }\n\n    setTurnsGrouped([]);\n    if (especialidadId === \"\" && profesionalId === \"\" && sucursalId === \"\") return;\n    showConsultasMessage.current = true;\n    getTurns();\n  }, [especialidadId, profesionalId, sucursalId]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(GridContainer, {\n      children: /*#__PURE__*/_jsxs(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        classes: {\n          root: \"\"\n        },\n        style: {\n          minHeight: \"calc(100vh - 55px)\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        children: [/*#__PURE__*/_jsxs(Card, {\n          children: [/*#__PURE__*/_jsx(CardHeader, {\n            color: \"primary\",\n            style: {\n              paddingTop: \"6px\",\n              paddingBottom: \"6px\"\n            },\n            children: /*#__PURE__*/_jsxs(\"h3\", {\n              className: classes.cardTitleWhite,\n              children: [/*#__PURE__*/_jsx(CalendarIcon, {\n                fontSize: \"large\"\n              }), \"Solicitud de Turnos\"]\n            })\n          }), /*#__PURE__*/_jsx(CardBody, {\n            style: {\n              padding: \"10px 20px\"\n            },\n            children: /*#__PURE__*/_jsxs(GridContainer, {\n              style: {\n                rowGap: \"1.5em\"\n              },\n              children: [/*#__PURE__*/_jsx(GridItem, {\n                xs: 12,\n                sm: 12,\n                md: 4,\n                children: /*#__PURE__*/_jsxs(FormControl, {\n                  fullWidth: true,\n                  children: [/*#__PURE__*/_jsx(InputLabel, {\n                    className: classes.label + \" \" + classes.labelEnabled,\n                    variant: \"standard\",\n                    htmlFor: \"uncontrolled-native\",\n                    children: \"Elija Especialidad\"\n                  }), /*#__PURE__*/_jsx(Select, {\n                    className: classes.select,\n                    classes: {\n                      root: classes.selectRoot\n                    },\n                    inputProps: {\n                      name: 'especialidad',\n                      key: 'especialidad',\n                      value: especialidadId,\n                      id: 'uncontrolled-native',\n                      required: false,\n                      onChange: e => {\n                        setEspecialidadId(e.target.value);\n                        setProfesionalId(\"\");\n                      }\n                    },\n                    children: especialidades.map(especialidad => /*#__PURE__*/_jsx(MenuItem, {\n                      value: especialidad.id,\n                      children: especialidad.nombre\n                    }))\n                  })]\n                }, \"especialidadForm\")\n              }), /*#__PURE__*/_jsx(GridItem, {\n                xs: 12,\n                sm: 12,\n                md: 3,\n                children: /*#__PURE__*/_jsxs(FormControl, {\n                  fullWidth: true,\n                  children: [/*#__PURE__*/_jsx(InputLabel, {\n                    className: classes.label + \" \" + classes.labelEnabled,\n                    variant: \"standard\",\n                    htmlFor: \"uncontrolled-native\",\n                    children: \"Elija Profesional\"\n                  }), /*#__PURE__*/_jsx(Select, {\n                    className: classes.select,\n                    classes: {\n                      root: classes.selectRoot\n                    },\n                    inputProps: {\n                      name: 'profesional',\n                      key: 'profesional',\n                      value: profesionalId,\n                      id: 'uncontrolled-native',\n                      required: true,\n                      onChange: e => setProfesionalId(e.target.value)\n                    },\n                    children: professionalsFiltered.length > 0 ? professionalsFiltered.map(professional => /*#__PURE__*/_jsx(MenuItem, {\n                      value: professional.id,\n                      children: professional.fullName\n                    })) : /*#__PURE__*/_jsx(MenuItem, {\n                      style: {\n                        color: \"red\",\n                        pointerEvents: \"none\"\n                      },\n                      value: 2,\n                      children: \"No hay profesionales para la especialidad seleccionada.\"\n                    })\n                  })]\n                }, \"profesionalForm\")\n              }), /*#__PURE__*/_jsx(GridItem, {\n                xs: 12,\n                sm: 12,\n                md: 3,\n                children: /*#__PURE__*/_jsxs(FormControl, {\n                  fullWidth: true,\n                  disabled: especialidadId === \"\" && profesionalId === \"\",\n                  children: [/*#__PURE__*/_jsx(InputLabel, {\n                    className: classes.label + \" \" + classes.labelEnabled,\n                    variant: \"standard\",\n                    htmlFor: \"uncontrolled-native\",\n                    children: \"Elija Lugar\"\n                  }), /*#__PURE__*/_jsx(Select, {\n                    className: classes.select,\n                    classes: {\n                      root: classes.selectRoot\n                    },\n                    inputProps: {\n                      name: 'lugar',\n                      key: 'lugar',\n                      value: sucursalId,\n                      id: 'uncontrolled-native',\n                      required: true,\n                      onChange: e => setSucursalId(e.target.value)\n                    },\n                    children: sucursales.map(sucursal => /*#__PURE__*/_jsx(MenuItem, {\n                      value: sucursal.id,\n                      children: sucursal.nombre\n                    }))\n                  })]\n                }, \"lugarForm\")\n              }), /*#__PURE__*/_jsx(GridItem, {\n                xs: 12,\n                sm: 12,\n                md: 2,\n                style: {\n                  textAlign: \"center\"\n                },\n                children: /*#__PURE__*/_jsx(Button, {\n                  style: {\n                    lineHeight: 0,\n                    padding: \"12px\"\n                  },\n                  startIcon: /*#__PURE__*/_jsx(ClearIcon, {}),\n                  onClick: resetFilters,\n                  color: \"primary\",\n                  children: \"Limpiar\"\n                })\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsx(TurnosDisponibles, {\n          turnsGrouped: turnsGrouped,\n          setOpen: setOpen,\n          setTurnSelected: setTurnSelected,\n          active: !(especialidadId === \"\" && profesionalId === \"\" && sucursalId === \"\"),\n          turnsGroupedKey: especialidadId + \",\" + profesionalId + \",\" + sucursalId,\n          showConsultasMessage: showConsultasMessage.current,\n          loading: loading\n        })]\n      })\n    }), /*#__PURE__*/_jsx(ConfirmationDialog, {\n      open: open,\n      onConfirm: () => {},\n      message: \"\",\n      setOpen: setOpen,\n      turno: turnSelected\n    })]\n  });\n}\n\nfunction TurnosDisponibles({\n  turnsGrouped,\n  setOpen,\n  setTurnSelected,\n  active,\n  turnsGroupedKey,\n  showConsultasMessage,\n  loading\n}) {\n  const classes = useTheme(styles);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [active && turnsGrouped.map(turnsGroup => /*#__PURE__*/_jsxs(\"div\", {\n      className: \"fade-in\",\n      children: [/*#__PURE__*/_jsx(Card, {\n        style: {\n          marginTop: \"10px\",\n          marginBottom: \"10px\"\n        },\n        className: \"proxTurnoCard\",\n        children: /*#__PURE__*/_jsxs(CardHeader, {\n          style: {\n            paddingTop: \"4px\",\n            paddingBottom: \"4px\"\n          },\n          color: \"secondary\",\n          children: [/*#__PURE__*/_jsx(PlaceIcon, {}), \" Lugar de atenci\\xF3n: \", /*#__PURE__*/_jsx(\"b\", {\n            children: turnsGroup.sucursal\n          })]\n        })\n      }), /*#__PURE__*/_jsx(GridContainer, {\n        style: {\n          margin: \"-10px -16px\"\n        },\n        children: turnsGroup.content.map((turno, index) => /*#__PURE__*/_jsx(GridItem, {\n          style: {\n            padding: \"8px 16px\",\n            marginTop: \"24px\"\n          },\n          xs: 12,\n          sm: 12,\n          md: 12,\n          lg: 6,\n          xl: 4,\n          children: /*#__PURE__*/_jsxs(Card, {\n            style: {\n              margin: 0,\n              height: \"100%\"\n            },\n            className: \"solicitarTurnoCard\",\n            children: [/*#__PURE__*/_jsx(CardHeader, {\n              style: {\n                paddingTop: \"2px\",\n                paddingBottom: \"2px\",\n                paddingInline: \"0\"\n              },\n              color: \"primary\",\n              children: /*#__PURE__*/_jsxs(\"h3\", {\n                className: \"\",\n                style: {\n                  fontSize: '20px',\n                  margin: \"auto\",\n                  display: \"block\",\n                  textAlign: \"center\"\n                },\n                children: [/*#__PURE__*/_jsx(CalendarIcon, {\n                  style: {\n                    fontSize: '30px'\n                  }\n                }), \"\\xA0\", getFullNameOfDate(turno.fecha, turno.hora)]\n              })\n            }), /*#__PURE__*/_jsxs(CardBody, {\n              style: {\n                paddingBlock: \"8px\",\n                paddingInline: \"16px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"start\"\n              },\n              children: [/*#__PURE__*/_jsx(\"img\", {\n                className: classes.profesionalImg,\n                src: avatar,\n                alt: \"...\"\n              }), /*#__PURE__*/_jsx(\"label\", {\n                style: {\n                  fontSize: '18px',\n                  width: \"60%\",\n                  textAlign: \"left\",\n                  paddingInline: \"6px\",\n                  display: \"block\"\n                },\n                children: turno.profesional\n              }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Button, {\n                color: \"primary\",\n                style: {\n                  paddingRight: \"10px\",\n                  paddingLeft: \"10px\",\n                  margin: \"auto\",\n                  display: \"block\",\n                  width: \"10%\",\n                  borderRadius: \"2rem\",\n                  minWidth: \"80px\"\n                },\n                size: \"small\",\n                onClick: () => {\n                  setOpen(true);\n                  setTurnSelected(turno);\n                },\n                children: \"Solicitar\"\n              })]\n            })]\n          })\n        }, turno.fecha + turno.profesional + index))\n      })]\n    }, turnsGroup.sucursal)), turnsGrouped.length === 0 && active && !loading && /*#__PURE__*/_jsx(\"h3\", {\n      className: \"fade-in-slow m-auto text-center \" + classes.colorSecondary,\n      children: \"No hay turnos disponibles seg\\xFAn lo seleccionado.\"\n    }, \"t1\" + turnsGroupedKey), showConsultasMessage && !active && !loading && /*#__PURE__*/_jsx(\"h3\", {\n      className: \"fade-in-slow m-auto text-center \" + classes.colorPrimary,\n      children: \"Los turnos que se obtienen son solo para consulta, para otros estudios comunicarse telef\\xF3nicamente.\"\n    }, \"t2\" + turnsGroupedKey), loading && /*#__PURE__*/_jsx(\"div\", {\n      className: \"fade-in-slow m-auto text-center\",\n      children: /*#__PURE__*/_jsx(LoadingSpinner, {})\n    })]\n  });\n}\n\nfunction ConfirmationDialog({\n  open,\n  setOpen,\n  turno\n}) {\n  const classes = useTheme(styles);\n\n  const handleKeys = event => {\n    if (event.key === \"Enter\") {\n      setOpen(false);\n    }\n\n    if (event.key === \"Escape\") {\n      setOpen(false);\n    }\n  };\n\n  const {\n    user\n  } = useContext(UserContext);\n  console.log(user);\n  const messageDialog = useContext(MessageDialogContext);\n  const router = useRouter();\n\n  const handleConfirm = async () => {\n    const {\n      profesionalId: professionalId,\n      fecha,\n      hora,\n      patienteId,\n      horarioId\n    } = _objectSpread(_objectSpread({}, turno), {}, {\n      patienteId: user.id\n    });\n\n    setConfirmEnabled(false);\n    const requestTurnResponse = await requestTurn(user.consultorioId, await GLOBAL_GET_TOKEN(), {\n      professionalId,\n      fecha,\n      hora,\n      patienteId,\n      horarioId\n    });\n    console.log(requestTurnResponse);\n\n    if (!requestTurnResponse.success) {\n      messageDialog.reset();\n      messageDialog.setMessage(requestTurnResponse.message);\n      messageDialog.open();\n      return;\n    }\n\n    messageDialog.messageOpen(\"Se reservó su turno con éxito.\", \"Confirmación del turno\");\n    router.push(\"/admin/\" + user.consultorioId + \"/dashboard\");\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setTimeout(resetFocus, 0);\n  };\n\n  const {\n    0: confirmEnabled,\n    1: setConfirmEnabled\n  } = useState(true);\n  return /*#__PURE__*/_jsx(Dialog, {\n    open: open,\n    onKeyDown: handleKeys,\n    onClose: handleClose,\n    className: \"solicitarTurnoDialog\",\n    children: /*#__PURE__*/_jsx(DialogContent, {\n      children: /*#__PURE__*/_jsxs(Card, {\n        style: {\n          marginTop: \"10px\",\n          marginBottom: \"10px\"\n        },\n        className: \"proxTurnoCard\",\n        children: [/*#__PURE__*/_jsxs(CardHeader, {\n          className: \"dialogCardHeader\",\n          style: {\n            fontSize: \"1.5rem\",\n            padding: \"8px\",\n            textAlign: \"center\"\n          },\n          color: \"primary\",\n          children: [/*#__PURE__*/_jsx(CheckCircleIcon, {\n            className: \"dialogCardHeader\",\n            style: {\n              fontSize: \"1.5rem\"\n            }\n          }), \" \\xBFDesea confirmar la solicitud de este turno?\"]\n        }), /*#__PURE__*/_jsxs(CardBody, {\n          style: {\n            paddingTop: 0\n          },\n          children: [/*#__PURE__*/_jsxs(List, {\n            children: [/*#__PURE__*/_jsxs(ListItem, {\n              children: [/*#__PURE__*/_jsx(ListItemAvatar, {\n                children: /*#__PURE__*/_jsxs(\"label\", {\n                  className: classes.colorPrimary,\n                  children: [/*#__PURE__*/_jsx(\"label\", {\n                    style: {\n                      fontSize: '20px'\n                    },\n                    children: /*#__PURE__*/_jsx(\"b\", {\n                      children: fullDateToDayMonth(turno.fecha)\n                    })\n                  }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(\"label\", {\n                    style: {\n                      fontSize: '13px'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"b\", {\n                      children: turno.hora\n                    }), \"hs\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\"]\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(ListItemText, {\n                primary: /*#__PURE__*/_jsxs(\"label\", {\n                  className: \"\",\n                  children: [/*#__PURE__*/_jsxs(\"label\", {\n                    style: {\n                      fontSize: '15px'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"b\", {\n                      children: \"Especialidad: \"\n                    }), /*#__PURE__*/_jsx(\"label\", {\n                      style: {\n                        fontSize: '14px'\n                      },\n                      children: turno.especialidad\n                    })]\n                  }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(\"label\", {\n                    style: {\n                      fontSize: '15px'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"b\", {\n                      children: \"Lugar de Atenci\\xF3n: \"\n                    }), /*#__PURE__*/_jsx(\"label\", {\n                      style: {\n                        fontSize: '14px'\n                      },\n                      children: turno.sucursal\n                    })]\n                  }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(\"label\", {\n                    style: {\n                      fontSize: '15px'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"b\", {\n                      children: \"Fecha: \"\n                    }), /*#__PURE__*/_jsx(\"label\", {\n                      style: {\n                        fontSize: '14px'\n                      },\n                      children: getFullNameOfDate(turno.fecha, turno.hora)\n                    })]\n                  }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(\"label\", {\n                    style: {\n                      fontSize: '15px'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"b\", {\n                      children: \"Profesional: \"\n                    }), /*#__PURE__*/_jsx(\"label\", {\n                      style: {\n                        fontSize: '14px'\n                      },\n                      children: turno.profesional\n                    })]\n                  }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(\"label\", {\n                    style: {\n                      fontSize: '15px'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"b\", {\n                      children: \"Motivo: \"\n                    }), /*#__PURE__*/_jsx(\"label\", {\n                      style: {\n                        fontSize: '14px'\n                      },\n                      children: turno.motivo\n                    })]\n                  }), /*#__PURE__*/_jsx(\"br\", {})]\n                })\n              })]\n            }), /*#__PURE__*/_jsx(\"hr\", {})]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            style: {\n              display: \"flex\",\n              justifyContent: \"space-evenly\",\n              marginBottom: \"8px\"\n            },\n            children: [/*#__PURE__*/_jsx(Button, {\n              onClick: handleClose,\n              color: \"secondaryOutlined\",\n              children: \"Cancelar\"\n            }), /*#__PURE__*/_jsx(Button, {\n              onClick: handleConfirm,\n              color: \"primary\",\n              disabled: !confirmEnabled,\n              children: \"Confirmar\"\n            })]\n          })]\n        })]\n      })\n    })\n  });\n}\n\nSolicitarTurno.layout = Admin;\nexport default SolicitarTurno;","map":null,"metadata":{},"sourceType":"module"}