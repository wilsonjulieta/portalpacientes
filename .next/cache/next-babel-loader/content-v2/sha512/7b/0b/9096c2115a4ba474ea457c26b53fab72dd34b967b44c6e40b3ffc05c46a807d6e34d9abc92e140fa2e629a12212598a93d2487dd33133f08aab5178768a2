{"ast":null,"code":"/* Takes array of objects, returns array of objects \r\narray = [{\r\n        key: \"asd\",\r\n        name: \"name\"\r\n    },\r\n    {\r\n        key: \"asd2\",\r\n        name: \"name\"\r\n    }\r\n] \r\nReturn = [{\r\n        key: \"asd\",\r\n        content: [\r\n            {\r\n                key: \"asd\",\r\n                name: \"name\"\r\n            }   \r\n        ]\r\n    },\r\n    {\r\n        key: \"asd2\",\r\n        content: [\r\n            {\r\n                key: \"asd2\",\r\n                name: \"name\"\r\n            }   \r\n        ]\r\n    }\r\n] \r\n*/\nexport function groupBy(array, key) {\n  const map = new Map();\n  array.forEach(element => {\n    if (map.has(element[key])) {\n      map.get(element[key]).push(element);\n    } else {\n      map.set(element[key], [element]);\n    }\n  });\n  const result = [];\n\n  for (const [keyValue, elements] of map) {\n    result.push({\n      [key]: keyValue,\n      content: elements\n    });\n  }\n\n  return result;\n} // Recibe el arreglo nextTurns, lo devuelve separado en arreglos por mes. Ejemplo: [{mes: 7, turnos: [...]}, {mes: 9, turnos: [...]}]\n\nexport function parseTurns(turns) {\n  const nextTurnsMap = new Map();\n\n  for (const turn of turns) {\n    const monthNumber = Number(turn.fecha.split(\"-\")[0]);\n    const yearNumber = Number(turn.fecha.split(\"-\")[2]);\n\n    if (nextTurnsMap.has(monthNumber + \"/\" + yearNumber)) {\n      nextTurnsMap.get(monthNumber + \"/\" + yearNumber).push(turn);\n    } else {\n      nextTurnsMap.set(monthNumber + \"/\" + yearNumber, [turn]);\n    }\n  }\n\n  const nextTurnsParsed = [];\n\n  for (const [monthAndYear, turns] of nextTurnsMap) {\n    nextTurnsParsed.push({\n      monthNumber: Number(monthAndYear.split(\"/\")[0]),\n      yearNumber: Number(monthAndYear.split(\"/\")[1]),\n      turns\n    });\n  }\n\n  nextTurnsParsed.sort((a, b) => {\n    if (b.yearNumber < a.yearNumber) return -1;\n    if (b.yearNumber > a.yearNumber) return 1;\n    return b.monthNumber - a.monthNumber;\n  });\n  return nextTurnsParsed;\n}","map":null,"metadata":{},"sourceType":"module"}