{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useRef, useState } from \"react\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\"; // layout for this page\n\nimport Admin from \"layouts/Admin.js\"; // core components\n\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardAvatar from \"components/Card/CardAvatar.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport avatar from \"assets/img/faces/marc.jpg\";\nimport { FormControl, List, ListItem, ListItemAvatar, ListItemText, MenuItem, Select } from \"@material-ui/core\";\nimport useTheme from \"../../../hooks/useTheme\";\nimport CalendarIcon from '@material-ui/icons/Today';\nimport PersonIcon from '@material-ui/icons/Person';\nimport CreateIcon from '@material-ui/icons/Create';\nimport AddIcon from '@material-ui/icons/Add';\nimport ShortcutIcon from '@material-ui/icons/RotateRight';\nimport RecetasIcon from '@material-ui/icons/ListAlt';\nimport adminStyles from \"assets/jss/nextjs-material-dashboard/layouts/adminStyle.js\";\nimport Link from \"next/dist/client/link\";\nimport { useRouter } from \"next/router\";\nimport { UserContext } from \"../../../context/UserContextProvider\";\nimport { dayMonthYear } from \"../../../utils/dates\";\nimport ProxTurnos from \"../../../components/ProxTurnos/ProxTurnos\";\nimport { getNextTurns } from \"../../../services/turns\";\nimport nookies from 'nookies';\nimport GLOBAL_GET_TOKEN from \"../../../utils/token\";\nimport { calculateAge } from \"../../../utils/age\";\nimport { getHealthCareList } from \"../../../services/healthcare\";\nimport { patientsPut } from \"../../../services/patients\";\nimport { MessageDialogContext } from \"../../../context/MessageDialogContextProvider\";\nimport { showLoad } from \"../../../utils/loading\";\nimport { CustomRadio, CustomRadioGroup } from \"../../../components/CustomInput/CustomRadioGroup\";\nimport LineSeparator from \"../../../components/Utils/LineSeparator\";\n\nconst styles = _objectSpread(_objectSpread({}, adminStyles()), {}, {\n  cardCategoryWhite: {\n    color: \"rgba(255,255,255,.62)\",\n    margin: \"0\",\n    fontSize: \"14px\",\n    marginTop: \"0\",\n    marginBottom: \"0\"\n  },\n  cardTitleWhite: {\n    color: \"#FFFFFF\",\n    marginTop: \"0px\",\n    minHeight: \"auto\",\n    fontWeight: \"300\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: \"3px\",\n    textDecoration: \"none\"\n  },\n  description: {\n    fontSize: \"1.25rem\"\n  },\n  colorPrimary: {\n    color: props => props.colorPrimary\n  }\n});\n\nexport async function getServerSideProps(context) {\n  const {\n    consultorioId\n  } = context.query;\n  const cookies = nookies.get(context);\n  const nextTurnsResponse = await getNextTurns(cookies.id, consultorioId, await GLOBAL_GET_TOKEN(context));\n\n  if (!nextTurnsResponse.success) {\n    return {\n      redirect: {\n        destination: '/login/' + consultorioId + \"/server-error\",\n        permanent: false\n      }\n    };\n  } //   console.log({nextTurns: nextTurnsResponse.data});\n\n\n  const healthCareListResponse = await getHealthCareList(consultorioId, await GLOBAL_GET_TOKEN(context));\n\n  if (!healthCareListResponse.success) {\n    return {\n      redirect: {\n        destination: '/login/' + consultorioId + \"/server-error\",\n        permanent: false\n      }\n    };\n  }\n\n  return {\n    props: {\n      consultorioId,\n      nextTurns: nextTurnsResponse.data,\n      healthCareList: healthCareListResponse.data\n    }\n  };\n}\n\nfunction Profile({\n  nombre,\n  nextTurns,\n  healthCareList\n}) {\n  var _formData$tipodoc, _healthCareList$find;\n\n  const classes = useTheme(styles);\n  const {\n    user\n  } = useContext(UserContext);\n  const messageDialog = useContext(MessageDialogContext);\n  const {\n    0: formData,\n    1: setFormData\n  } = useState(user);\n  const {\n    0: errorMsg,\n    1: setErrorMsg\n  } = useState(\"\");\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [name]: value\n    }));\n    setErrorMsg(\"\");\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const inputs = document.querySelectorAll(\"input\");\n    const okay = [...inputs].every(input => input.reportValidity());\n\n    if (!okay) {\n      return;\n    }\n\n    const url = \"/admin/\" + user.consultorioId + \"/profile\";\n    showLoad(url);\n    const putResponse = await patientsPut(consultorioId, await GLOBAL_GET_TOKEN(), formData);\n    router.push(url);\n\n    if (!putResponse.success) {\n      messageDialog.warningOpen(putResponse.message);\n      return;\n    }\n\n    messageDialog.messageOpen(\"Sus datos han sido actualizados satisfactoriamente.\", \"EdiciÃ³n de perfil\");\n  }; // const [editingAdress, setEditingAdress] = useState(false);\n  // const handleAddressFocus = (e) => {\n  //     e.preventDefault();\n  //     setEditingAdress(true);\n  //     if (e.target.value === \"No posee\") {\n  //         console.log(e);\n  //         setFormData(prev => ({ ...prev, address: \"\" }))\n  //     }\n  // }\n  // const handleAddressBlur = (e) => {\n  //     e.preventDefault();\n  //     setEditingAdress(false);\n  // }\n\n\n  console.log(formData);\n  const router = useRouter();\n  const {\n    consultorioId\n  } = router.query;\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: /*#__PURE__*/_jsx(GridContainer, {\n      children: /*#__PURE__*/_jsx(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        lg: 12,\n        xl: 12,\n        order: 1,\n        children: /*#__PURE__*/_jsxs(Card, {\n          profile: true,\n          style: {\n            marginBlock: \"3px\",\n            height: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsx(CardHeader, {\n            color: \"secondary\",\n            style: {\n              padding: \"0\"\n            },\n            children: /*#__PURE__*/_jsxs(\"h3\", {\n              className: classes.cardTitleWhite,\n              children: [/*#__PURE__*/_jsx(PersonIcon, {\n                fontSize: \"large\"\n              }), \"Mi Perfil\"]\n            })\n          }), /*#__PURE__*/_jsx(CardBody, {\n            profile: true,\n            style: {\n              padding: \"5px\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\"\n            },\n            children: /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                marginBlock: \"0.5em\",\n                padding: \"0 10px\",\n                width: \"100%\",\n                textAlign: \"left\"\n              },\n              children: /*#__PURE__*/_jsxs(GridContainer, {\n                classes: {\n                  container: \"rg-1\"\n                },\n                children: [/*#__PURE__*/_jsx(GridItem, {\n                  xs: 7,\n                  sm: 6,\n                  md: 6,\n                  children: /*#__PURE__*/_jsxs(FormControl, {\n                    fullWidth: true,\n                    children: [/*#__PURE__*/_jsx(InputLabel, {\n                      className: classes.label + \" \" + classes.labelEnabled,\n                      variant: \"standard\",\n                      htmlFor: \"uncontrolled-native\",\n                      children: \"Tipo de Documento\"\n                    }), /*#__PURE__*/_jsxs(Select, {\n                      className: classes.select,\n                      classes: {\n                        root: classes.selectRoot\n                      },\n                      inputProps: {\n                        name: 'tipodoc',\n                        key: 'tipodoc',\n                        value: (_formData$tipodoc = formData.tipodoc) !== null && _formData$tipodoc !== void 0 ? _formData$tipodoc : 1,\n                        id: 'uncontrolled-native',\n                        required: true,\n                        readOnly: true,\n                        onChange: handleChange,\n                        style: {\n                          textAlign: \"left\"\n                        }\n                      },\n                      children: [/*#__PURE__*/_jsx(MenuItem, {\n                        value: 1,\n                        selected: true,\n                        children: \"DNI\"\n                      }), /*#__PURE__*/_jsx(MenuItem, {\n                        value: 2,\n                        children: \"CI\"\n                      }), /*#__PURE__*/_jsx(MenuItem, {\n                        value: 3,\n                        children: \"Pasaporte\"\n                      })]\n                    })]\n                  }, \"tipoDocForm\")\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  xs: 5,\n                  sm: 6,\n                  md: 6,\n                  children: /*#__PURE__*/_jsx(CustomInput, {\n                    labelText: \"Nro. de Doc.\",\n                    id: \"dni\",\n                    formControlProps: {\n                      fullWidth: true,\n                      classes: {\n                        root: \"m-0 p-0\"\n                      }\n                    },\n                    inputProps: {\n                      type: \"number\",\n                      name: 'dni',\n                      key: 'dni',\n                      value: formData.dni || \"123\",\n                      id: \"dni\",\n                      required: true,\n                      autoComplete: \"dni\",\n                      readOnly: true,\n                      onChange: handleChange\n                    }\n                  }, \"dniCustomInput\")\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  xs: 7,\n                  sm: 6,\n                  md: 6,\n                  children: /*#__PURE__*/_jsx(CustomInput, {\n                    labelText: \"Fecha de nacimiento\",\n                    id: \"birthDate\",\n                    formControlProps: {\n                      fullWidth: true,\n                      classes: {\n                        root: \"m-0 p-0\"\n                      }\n                    },\n                    inputProps: {\n                      type: \"date\",\n                      name: 'birthDate',\n                      key: 'birthDate',\n                      value: formData.birthDate ? new Date(formData.birthDate).toISOString().slice(0, 10) : \"\",\n                      id: \"birthDate\",\n                      required: true,\n                      autoComplete: \"birthDate\",\n                      onChange: handleChange\n                    },\n                    moreInputProps: {\n                      min: new Date(\"1850-01-01\").toISOString().split(\"T\")[0],\n                      max: new Date().toISOString().split(\"T\")[0]\n                    }\n                  }, \"birthDateCustomInput\")\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  xs: 5,\n                  sm: 6,\n                  md: 6,\n                  children: /*#__PURE__*/_jsx(CustomInput, {\n                    labelText: \"Edad\",\n                    id: \"age\",\n                    formControlProps: {\n                      fullWidth: true,\n                      classes: {\n                        root: \"m-0 p-0\"\n                      }\n                    },\n                    inputProps: {\n                      type: \"number\",\n                      name: 'age',\n                      key: 'age',\n                      value: calculateAge(formData.birthDate),\n                      id: \"age\",\n                      required: true,\n                      autoComplete: \"age\",\n                      readOnly: true,\n                      onChange: handleChange\n                    }\n                  }, \"ageCustomInput\")\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  xs: 12,\n                  sm: 6,\n                  md: 6,\n                  children: /*#__PURE__*/_jsx(CustomInput, {\n                    labelText: \"Apellido/s\",\n                    id: \"lastName\",\n                    formControlProps: {\n                      fullWidth: true,\n                      classes: {\n                        root: \"m-0 p-0\"\n                      }\n                    },\n                    inputProps: {\n                      name: 'lastName',\n                      key: 'lastName',\n                      value: formData.lastName,\n                      id: \"lastName\",\n                      required: true,\n                      autoComplete: \"lastName\",\n                      onChange: handleChange\n                    }\n                  }, \"lastName\")\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  xs: 12,\n                  sm: 6,\n                  md: 6,\n                  children: /*#__PURE__*/_jsx(CustomInput, {\n                    labelText: \"Nombre/s\",\n                    id: \"firstName\",\n                    formControlProps: {\n                      fullWidth: true,\n                      classes: {\n                        root: \"m-0 p-0\"\n                      }\n                    },\n                    inputProps: {\n                      name: 'firstName',\n                      key: 'firstName',\n                      value: formData.firstName,\n                      id: \"firstName\",\n                      required: true,\n                      autoComplete: \"firstName\",\n                      onChange: handleChange\n                    }\n                  }, \"firstName\")\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  xs: 12,\n                  sm: 12,\n                  md: 12,\n                  children: /*#__PURE__*/_jsx(CustomInput, {\n                    labelText: \"Correo Electr\\xF3nico\",\n                    id: \"email\",\n                    formControlProps: {\n                      fullWidth: true,\n                      classes: {\n                        root: \"m-0 p-0\"\n                      }\n                    },\n                    inputProps: {\n                      type: \"email\",\n                      name: 'email',\n                      key: 'email',\n                      value: formData.email,\n                      id: \"email\",\n                      required: true,\n                      autoComplete: \"email\",\n                      onChange: handleChange\n                    }\n                  }, \"email\")\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  xs: 12,\n                  sm: 12,\n                  md: 6,\n                  children: /*#__PURE__*/_jsx(CustomInput, {\n                    labelText: \"Nro. de celular\",\n                    id: \"cellNumber\",\n                    formControlProps: {\n                      fullWidth: true,\n                      classes: {\n                        root: \"m-0 p-0\"\n                      }\n                    },\n                    inputProps: {\n                      name: 'cellNumber',\n                      key: 'cellNumber',\n                      value: formData.cellNumber,\n                      id: \"cellNumber\",\n                      required: true,\n                      autoComplete: \"cellNumber\",\n                      onChange: handleChange,\n                      readOnly: true\n                    }\n                  }, \"cellNumber\")\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  xs: 12,\n                  sm: 12,\n                  md: 6,\n                  className: \"\",\n                  children: /*#__PURE__*/_jsxs(\"div\", {\n                    className: \"my-4 sm:my-0\",\n                    children: [/*#__PURE__*/_jsxs(\"div\", {\n                      className: \"text-base font-normal flex items-end justify-between\",\n                      children: [/*#__PURE__*/_jsx(\"div\", {\n                        className: classes.colorPrimary + \"\",\n                        children: \"Sexo\"\n                      }), /*#__PURE__*/_jsx(\"div\", {\n                        className: \"w-5/6\",\n                        children: /*#__PURE__*/_jsxs(CustomRadioGroup, {\n                          name: \"sexo\",\n                          value: formData.sexo,\n                          setValue: sexo => setFormData(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                            sexo: sexo\n                          })),\n                          children: [/*#__PURE__*/_jsx(CustomRadio, {\n                            name: \"Masculino\",\n                            value: \"M\"\n                          }), /*#__PURE__*/_jsx(CustomRadio, {\n                            name: \"Femenino\",\n                            value: \"F\"\n                          }), /*#__PURE__*/_jsx(CustomRadio, {\n                            name: \"Otro\",\n                            value: \"O\"\n                          })]\n                        })\n                      })]\n                    }), /*#__PURE__*/_jsx(LineSeparator, {})]\n                  })\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  xs: 12,\n                  sm: 12,\n                  md: 12,\n                  children: /*#__PURE__*/_jsx(CustomInput, {\n                    labelText: \"Cobertura\",\n                    id: \"medicalCareId\",\n                    formControlProps: {\n                      fullWidth: true,\n                      classes: {\n                        root: \"m-0 p-0\"\n                      }\n                    },\n                    inputProps: {\n                      name: 'medicalCareId',\n                      key: 'medicalCareId',\n                      value: ((_healthCareList$find = healthCareList.find(elem => elem.id === formData.medicalCareId)) === null || _healthCareList$find === void 0 ? void 0 : _healthCareList$find.name) || \"No posee\",\n                      id: \"medicalCareId\",\n                      required: true,\n                      autoComplete: \"medicalCareId\",\n                      onChange: handleChange,\n                      readOnly: true\n                    }\n                  }, \"medicalCareId\")\n                }), /*#__PURE__*/_jsx(GridItem, {\n                  xs: 12,\n                  sm: 12,\n                  md: 12,\n                  children: /*#__PURE__*/_jsx(CustomInput, {\n                    labelText: \"Domicilio\",\n                    id: \"address\",\n                    formControlProps: {\n                      fullWidth: true,\n                      classes: {\n                        root: \"m-0 p-0\"\n                      }\n                    },\n                    inputProps: {\n                      name: 'address',\n                      key: 'address',\n                      value: formData.address,\n                      id: \"address\",\n                      required: true,\n                      autoComplete: \"address\",\n                      onChange: handleChange,\n                      readOnly: false // onFocus: handleAddressFocus,\n                      // onBlur: handleAddressBlur\n\n                    }\n                  }, \"address\")\n                })]\n              })\n            })\n          }), /*#__PURE__*/_jsx(Button, {\n            style: {\n              margin: \"1rem auto\"\n            },\n            onClick: handleSubmit,\n            type: \"button\",\n            color: \"primary\",\n            children: \"Confirmar Cambios\"\n          })]\n        })\n      })\n    })\n  });\n}\n\nProfile.layout = Admin;\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}