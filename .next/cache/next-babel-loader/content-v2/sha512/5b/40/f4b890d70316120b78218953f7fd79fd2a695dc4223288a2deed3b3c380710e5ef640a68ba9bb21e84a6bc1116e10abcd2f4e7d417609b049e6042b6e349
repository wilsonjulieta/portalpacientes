{"ast":null,"code":"import URL from \"../constants/URL\";\nimport { POST } from \"./FETCH.JS\";\nimport { getToken } from \"./FETCH.JS\";\nimport { GET } from \"./FETCH.JS\";\nexport async function logIn(tipodoc, username, password, consultorioId) {\n  let loginResponse;\n\n  try {\n    const token = await getToken(); //Si no hay token se va al catch directamente\n\n    const response = await POST(consultorioId, token, \"patients/login\", {\n      tipodoc: Number(tipodoc),\n      dni: Number(username),\n      password,\n      email: \"\"\n    });\n    if (response.status !== 200) //Si falla el login se va al catch directamente\n      throw Error(\"Ocurrió un error en el servidor. Intente nuevamente.\");\n    const data = await response.json(); //Si falla al pedir los datos del paciente va al catch\n\n    if (data.registrado === false) {\n      throw Error(\"Sus datos están cargados pero no se encuentra registrado. Ingrese a \\\"registrarse\\\".\");\n    }\n\n    if (data.id === 0) {\n      throw Error(\"Nombre de usuario o contraseña incorrectos\");\n    }\n\n    loginResponse = {\n      loggedIn: true,\n      data,\n      token\n    };\n  } catch (err) {\n    loginResponse = {\n      loggedIn: false,\n      message: err.message\n    };\n  }\n\n  console.dir({\n    loginResponse\n  });\n  return loginResponse;\n}\nexport async function getPatient(id, consultorioId, token) {\n  let patientResponse;\n\n  try {\n    const r3 = await GET(consultorioId, token, \"patients/\" + id);\n\n    if (r3.status != 200) {\n      throw new Error();\n    }\n\n    const data = await r3.json(); //Si falla al pedir los datos del paciente va al catch\n\n    patientResponse = {\n      success: true,\n      data\n    };\n  } catch (err) {\n    patientResponse = {\n      success: false\n    };\n  }\n\n  return patientResponse;\n}","map":{"version":3,"sources":["C:/DATOS/THISYS/SISTEMA/PORTAL WEB/Proyecto-Salud/services/userAuth.js"],"names":["URL","POST","getToken","GET","logIn","tipodoc","username","password","consultorioId","loginResponse","token","response","Number","dni","email","status","Error","data","json","registrado","id","loggedIn","err","message","console","dir","getPatient","patientResponse","r3","success"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,kBAAhB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,GAAT,QAAoB,YAApB;AAEA,OAAO,eAAeC,KAAf,CAAqBC,OAArB,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAkDC,aAAlD,EAAiE;AACpE,MAAIC,aAAJ;;AAEA,MAAI;AACA,UAAMC,KAAK,GAAG,MAAMR,QAAQ,EAA5B,CADA,CACgC;;AAEhC,UAAMS,QAAQ,GAAG,MAAMV,IAAI,CAACO,aAAD,EAAgBE,KAAhB,EAAuB,gBAAvB,EACvB;AACIL,MAAAA,OAAO,EAAEO,MAAM,CAACP,OAAD,CADnB;AAEIQ,MAAAA,GAAG,EAAED,MAAM,CAACN,QAAD,CAFf;AAGIC,MAAAA,QAHJ;AAIIO,MAAAA,KAAK,EAAE;AAJX,KADuB,CAA3B;AASA,QAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AACzB,YAAMC,KAAK,CAAC,sDAAD,CAAX;AAEJ,UAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB,CAfA,CAeqC;;AAErC,QAAID,IAAI,CAACE,UAAL,KAAoB,KAAxB,EAA+B;AAC3B,YAAMH,KAAK,CAAC,sFAAD,CAAX;AACH;;AAED,QAAIC,IAAI,CAACG,EAAL,KAAY,CAAhB,EAAmB;AACf,YAAMJ,KAAK,CAAC,4CAAD,CAAX;AACH;;AAEDP,IAAAA,aAAa,GAAG;AAAEY,MAAAA,QAAQ,EAAE,IAAZ;AAAkBJ,MAAAA,IAAlB;AAAwBP,MAAAA;AAAxB,KAAhB;AAGH,GA5BD,CA4BE,OAAOY,GAAP,EAAY;AACVb,IAAAA,aAAa,GAAG;AAAEY,MAAAA,QAAQ,EAAE,KAAZ;AAAmBE,MAAAA,OAAO,EAAED,GAAG,CAACC;AAAhC,KAAhB;AACH;;AAEDC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAChB,IAAAA;AAAD,GAAZ;AAEA,SAAOA,aAAP;AAEH;AAED,OAAO,eAAeiB,UAAf,CAA0BN,EAA1B,EAA8BZ,aAA9B,EAA6CE,KAA7C,EAAoD;AACvD,MAAIiB,eAAJ;;AAEA,MAAI;AACA,UAAMC,EAAE,GAAG,MAAMzB,GAAG,CAACK,aAAD,EAAgBE,KAAhB,EAAuB,cAAcU,EAArC,CAApB;;AAEA,QAAIQ,EAAE,CAACb,MAAH,IAAa,GAAjB,EAAsB;AAClB,YAAM,IAAIC,KAAJ,EAAN;AACH;;AAED,UAAMC,IAAI,GAAG,MAAMW,EAAE,CAACV,IAAH,EAAnB,CAPA,CAO6B;;AAE7BS,IAAAA,eAAe,GAAG;AAAEE,MAAAA,OAAO,EAAE,IAAX;AAAiBZ,MAAAA;AAAjB,KAAlB;AAEH,GAXD,CAWE,OAAOK,GAAP,EAAY;AACVK,IAAAA,eAAe,GAAG;AAAEE,MAAAA,OAAO,EAAE;AAAX,KAAlB;AACH;;AAED,SAAOF,eAAP;AAEH","sourcesContent":["import URL from \"../constants/URL\";\r\nimport { POST } from \"./FETCH.JS\";\r\nimport { getToken } from \"./FETCH.JS\";\r\nimport { GET } from \"./FETCH.JS\";\r\n\r\nexport async function logIn(tipodoc, username, password, consultorioId) {\r\n    let loginResponse;\r\n\r\n    try {\r\n        const token = await getToken(); //Si no hay token se va al catch directamente\r\n\r\n        const response = await POST(consultorioId, token, \"patients/login\",\r\n            {\r\n                tipodoc: Number(tipodoc),\r\n                dni: Number(username),\r\n                password,\r\n                email: \"\"\r\n            }\r\n        );\r\n\r\n        if (response.status !== 200) //Si falla el login se va al catch directamente\r\n            throw Error(\"Ocurrió un error en el servidor. Intente nuevamente.\");\r\n\r\n        const data = await response.json();  //Si falla al pedir los datos del paciente va al catch\r\n\r\n        if (data.registrado === false) {\r\n            throw Error(\"Sus datos están cargados pero no se encuentra registrado. Ingrese a \\\"registrarse\\\".\");\r\n        }\r\n\r\n        if (data.id === 0) {\r\n            throw Error(\"Nombre de usuario o contraseña incorrectos\");\r\n        }\r\n\r\n        loginResponse = { loggedIn: true, data, token };\r\n\r\n\r\n    } catch (err) {\r\n        loginResponse = { loggedIn: false, message: err.message }\r\n    }\r\n\r\n    console.dir({loginResponse});\r\n\r\n    return loginResponse;\r\n\r\n}\r\n\r\nexport async function getPatient(id, consultorioId, token) {\r\n    let patientResponse;\r\n\r\n    try {\r\n        const r3 = await GET(consultorioId, token, \"patients/\" + id);\r\n\r\n        if (r3.status != 200) {\r\n            throw new Error();\r\n        }\r\n\r\n        const data = await r3.json() //Si falla al pedir los datos del paciente va al catch\r\n\r\n        patientResponse = { success: true, data }; \r\n\r\n    } catch (err) {\r\n        patientResponse = { success: false }\r\n    }\r\n\r\n    return patientResponse;\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}