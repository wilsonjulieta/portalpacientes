{"ast":null,"code":"import { DELETE } from \"./FETCH.JS\";\nimport { POST } from \"./FETCH.JS\";\nimport { GET } from \"./FETCH.JS\";\nexport async function getNextTurns(patientId, consultorioId, token) {\n  let nextTurnsResponse;\n\n  try {\n    const response = await GET(consultorioId, token, \"turns/next?patientId=\" + patientId);\n    if (response.status !== 200) //Si falla se va al catch directamente\n      throw Error(\"\");\n    const data = await response.json(); //Si falla al pedir los datos va al catch\n\n    nextTurnsResponse = {\n      success: true,\n      data\n    };\n  } catch (err) {\n    nextTurnsResponse = {\n      success: false,\n      message: err.message\n    };\n  }\n\n  return nextTurnsResponse;\n}\nexport async function getProfessionals(consultorioId, token) {\n  let professionalsResponse;\n\n  try {\n    console.log({\n      token\n    });\n    const response = await GET(consultorioId, token, \"professionals\");\n    console.log(response);\n    if (response.status !== 200) //Si falla se va al catch directamente\n      throw Error(\"\");\n    const data = await response.json(); //Si falla al pedir los datos va al catch\n\n    professionalsResponse = {\n      success: true,\n      data\n    };\n  } catch (err) {\n    professionalsResponse = {\n      success: false,\n      message: err.message\n    };\n  }\n\n  return professionalsResponse;\n}\nexport async function getEspecialidades(consultorioId, token) {\n  let especialidadesResponse;\n\n  try {\n    console.log({\n      token\n    });\n    const response = await GET(consultorioId, token, \"especialidades\");\n    console.log(response);\n    if (response.status !== 200) //Si falla se va al catch directamente\n      throw Error(\"\");\n    const data = await response.json(); //Si falla al pedir los datos va al catch\n\n    especialidadesResponse = {\n      success: true,\n      data\n    };\n  } catch (err) {\n    especialidadesResponse = {\n      success: false,\n      message: err.message\n    };\n  }\n\n  return especialidadesResponse;\n}\nexport async function getSucursales(consultorioId, token) {\n  let sucursalesResponse;\n\n  try {\n    console.log({\n      token\n    });\n    const response = await GET(consultorioId, token, \"sucursales\");\n    console.log(response);\n    if (response.status !== 200) //Si falla se va al catch directamente\n      throw Error(\"\");\n    const data = await response.json(); //Si falla al pedir los datos va al catch\n\n    sucursalesResponse = {\n      success: true,\n      data\n    };\n  } catch (err) {\n    sucursalesResponse = {\n      success: false,\n      message: err.message\n    };\n  }\n\n  return sucursalesResponse;\n}\nexport async function getAvailableTurns(consultorioId, token, sucursalId, especialidadId, profesionalId) {\n  let turnsResponse;\n\n  try {\n    const response = await GET(consultorioId, token, `turns/available?sucursalId=${sucursalId}&especialidadId=${especialidadId}&profesionalId=${profesionalId}`);\n    if (response.status !== 200) //Si falla se va al catch directamente\n      if (response.headers.get(\"content-type\").includes(\"application/json\")) {\n        const json = await response.json();\n        throw Error(json.detail);\n      } else throw Error(\"\");\n    const data = await response.json(); //Si falla al pedir los datos va al catch\n\n    turnsResponse = {\n      success: true,\n      data\n    };\n  } catch (err) {\n    turnsResponse = {\n      success: false,\n      message: err.message\n    };\n  }\n\n  return turnsResponse;\n}\nexport async function requestTurn(consultorioId, token, {\n  fecha,\n  hora,\n  patienteId: pacienteId,\n  horarioId\n}) {\n  let turnsResponse;\n  console.log({\n    fecha,\n    hora,\n    patienteId: pacienteId,\n    horarioId\n  });\n\n  try {\n    const response = await POST(consultorioId, token, `turns`, {\n      fecha,\n      hora,\n      pacienteId,\n      horarioId\n    });\n    console.log(response.headers.get(\"content-type\"));\n    if (response.status !== 200) //Si falla se va al catch directamente\n      if (response.headers.get(\"content-type\").includes(\"application/json\")) {\n        const json = await response.json();\n        throw Error(json.detail);\n      } else throw Error(\"\");\n    const data = await response.json(); //Si falla al pedir los datos va al catch\n\n    turnsResponse = {\n      success: true,\n      data\n    };\n  } catch (err) {\n    console.dir({\n      err\n    });\n    turnsResponse = {\n      success: false,\n      message: err.message\n    };\n  }\n\n  return turnsResponse;\n}\nexport async function cancelTurn(consultorioId, token, turnId) {\n  let turnsResponse;\n\n  try {\n    const response = await DELETE(consultorioId, token, `turns/` + turnId);\n    console.log(response.headers.get(\"content-type\"));\n    if (response.status !== 200) //Si falla se va al catch directamente\n      if (response.headers.get(\"content-type\").includes(\"application/json\")) {\n        const json = await response.json();\n        throw Error(json.detail);\n      } else throw Error(\"\");\n    const data = await response.json(); //Si falla al pedir los datos va al catch\n\n    turnsResponse = {\n      success: true,\n      data\n    };\n  } catch (err) {\n    console.dir({\n      err\n    });\n    turnsResponse = {\n      success: false,\n      message: err.message\n    };\n  }\n\n  return turnsResponse;\n}\nexport async function getTurnsHistory(consultorioId, token, patientId) {\n  let turnsResponse;\n\n  try {\n    const response = await GET(consultorioId, token, \"turns?patientId=\" + patientId);\n    console.log(response.headers.get(\"content-type\"));\n    if (response.status !== 200) //Si falla se va al catch directamente\n      if (response.headers.get(\"content-type\").includes(\"application/json\")) {\n        const json = await response.json();\n        throw Error(json.detail);\n      } else throw Error(\"\");\n    const data = await response.json(); //Si falla al pedir los datos va al catch\n\n    turnsResponse = {\n      success: true,\n      data: data.filter(turn => turn.estado !== \"Pendiente\")\n    };\n  } catch (err) {\n    console.dir({\n      err\n    });\n    turnsResponse = {\n      success: false,\n      message: err.message\n    };\n  }\n\n  return turnsResponse;\n}","map":{"version":3,"sources":["C:/DATOS/THISYS/SISTEMA/PORTAL WEB/Proyecto-Salud/services/turns.js"],"names":["DELETE","POST","GET","getNextTurns","patientId","consultorioId","token","nextTurnsResponse","response","status","Error","data","json","success","err","message","getProfessionals","professionalsResponse","console","log","getEspecialidades","especialidadesResponse","getSucursales","sucursalesResponse","getAvailableTurns","sucursalId","especialidadId","profesionalId","turnsResponse","headers","get","includes","detail","requestTurn","fecha","hora","patienteId","pacienteId","horarioId","dir","cancelTurn","turnId","getTurnsHistory","filter","turn","estado"],"mappings":"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","sourcesContent":["import { DELETE } from \"./FETCH.JS\";\r\nimport { POST } from \"./FETCH.JS\";\r\nimport { GET } from \"./FETCH.JS\";\r\n\r\nexport async function getNextTurns(patientId, consultorioId, token) {\r\n\r\n    let nextTurnsResponse;\r\n\r\n    try {\r\n        const response = await GET(consultorioId, token, \"turns/next?patientId=\" + patientId);\r\n\r\n        if (response.status !== 200) //Si falla se va al catch directamente\r\n            throw Error(\"\")\r\n\r\n        const data = await response.json();  //Si falla al pedir los datos va al catch\r\n\r\n        nextTurnsResponse = { success: true, data };\r\n\r\n    } catch (err) {\r\n        nextTurnsResponse = { success: false, message: err.message }\r\n    }\r\n\r\n    return nextTurnsResponse;\r\n}\r\n\r\nexport async function getProfessionals(consultorioId, token) {\r\n\r\n    let professionalsResponse;\r\n\r\n    try {\r\n\r\n        console.log({ token });\r\n        const response = await GET(consultorioId, token, \"professionals\");\r\n\r\n        console.log(response);\r\n\r\n        if (response.status !== 200) //Si falla se va al catch directamente\r\n            throw Error(\"\")\r\n\r\n        const data = await response.json();  //Si falla al pedir los datos va al catch\r\n\r\n        professionalsResponse = { success: true, data };\r\n\r\n    } catch (err) {\r\n        professionalsResponse = { success: false, message: err.message }\r\n    }\r\n\r\n    return professionalsResponse;\r\n}\r\n\r\nexport async function getEspecialidades(consultorioId, token) {\r\n\r\n    let especialidadesResponse;\r\n\r\n    try {\r\n\r\n        console.log({ token });\r\n        const response = await GET(consultorioId, token, \"especialidades\");\r\n\r\n        console.log(response);\r\n\r\n        if (response.status !== 200) //Si falla se va al catch directamente\r\n            throw Error(\"\")\r\n\r\n        const data = await response.json();  //Si falla al pedir los datos va al catch\r\n\r\n        especialidadesResponse = { success: true, data };\r\n\r\n    } catch (err) {\r\n        especialidadesResponse = { success: false, message: err.message }\r\n    }\r\n\r\n    return especialidadesResponse;\r\n}\r\n\r\nexport async function getSucursales(consultorioId, token) {\r\n\r\n    let sucursalesResponse;\r\n\r\n    try {\r\n\r\n        console.log({ token });\r\n        const response = await GET(consultorioId, token, \"sucursales\");\r\n\r\n        console.log(response);\r\n\r\n        if (response.status !== 200) //Si falla se va al catch directamente\r\n            throw Error(\"\")\r\n\r\n        const data = await response.json();  //Si falla al pedir los datos va al catch\r\n\r\n        sucursalesResponse = { success: true, data };\r\n\r\n    } catch (err) {\r\n        sucursalesResponse = { success: false, message: err.message }\r\n    }\r\n\r\n    return sucursalesResponse;\r\n}\r\n\r\nexport async function getAvailableTurns(consultorioId, token, sucursalId, especialidadId, profesionalId) {\r\n\r\n    let turnsResponse;\r\n\r\n    try {\r\n        const response = await GET(consultorioId, token, `turns/available?sucursalId=${sucursalId}&especialidadId=${especialidadId}&profesionalId=${profesionalId}`);\r\n\r\n        if (response.status !== 200) //Si falla se va al catch directamente\r\n            if (response.headers.get(\"content-type\").includes(\"application/json\")) {\r\n                const json = await response.json();\r\n                throw Error(json.detail);\r\n            }\r\n            else \r\n                throw Error(\"\");\r\n\r\n        const data = await response.json();  //Si falla al pedir los datos va al catch\r\n\r\n        turnsResponse = { success: true, data };\r\n\r\n    } catch (err) {\r\n        turnsResponse = { success: false, message: err.message }\r\n    }\r\n\r\n    return turnsResponse;\r\n}\r\n\r\nexport async function requestTurn(consultorioId, token, {fecha, hora, patienteId: pacienteId, horarioId}) {\r\n\r\n    let turnsResponse;\r\n\r\n    console.log({ fecha, hora, patienteId: pacienteId, horarioId});\r\n\r\n    \r\n    try {\r\n        const response = await POST(consultorioId, token, `turns`, { fecha, hora, pacienteId, horarioId});\r\n        console.log(response.headers.get(\"content-type\"));\r\n        \r\n        if (response.status !== 200) //Si falla se va al catch directamente\r\n            if (response.headers.get(\"content-type\").includes(\"application/json\")) {\r\n                const json = await response.json();\r\n                throw Error(json.detail);\r\n            }\r\n            else \r\n                throw Error(\"\");\r\n\r\n        const data = await response.json();  //Si falla al pedir los datos va al catch\r\n\r\n        turnsResponse = { success: true, data };\r\n\r\n    } catch (err) {\r\n        console.dir({err});\r\n        turnsResponse = { success: false, message: err.message }\r\n    }\r\n\r\n    return turnsResponse;\r\n}\r\n\r\nexport async function cancelTurn(consultorioId, token, turnId) {\r\n\r\n    let turnsResponse;\r\n    \r\n    try {\r\n        const response = await DELETE(consultorioId, token, `turns/` + turnId);\r\n        console.log(response.headers.get(\"content-type\"));\r\n        \r\n        if (response.status !== 200) //Si falla se va al catch directamente\r\n            if (response.headers.get(\"content-type\").includes(\"application/json\")) {\r\n                const json = await response.json();\r\n                throw Error(json.detail);\r\n            }\r\n            else \r\n                throw Error(\"\");\r\n\r\n        const data = await response.json();  //Si falla al pedir los datos va al catch\r\n\r\n        turnsResponse = { success: true, data };\r\n\r\n    } catch (err) {\r\n        console.dir({err});\r\n        turnsResponse = { success: false, message: err.message }\r\n    }\r\n\r\n    return turnsResponse;\r\n}\r\n\r\nexport async function getTurnsHistory(consultorioId, token, patientId) {\r\n\r\n    let turnsResponse;\r\n    \r\n    try {\r\n        const response = await GET(consultorioId, token, \"turns?patientId=\" + patientId);\r\n        console.log(response.headers.get(\"content-type\"));\r\n        \r\n        if (response.status !== 200) //Si falla se va al catch directamente\r\n            if (response.headers.get(\"content-type\").includes(\"application/json\")) {\r\n                const json = await response.json();\r\n                throw Error(json.detail);\r\n            }\r\n            else \r\n                throw Error(\"\");\r\n\r\n        const data = await response.json();  //Si falla al pedir los datos va al catch\r\n\r\n        turnsResponse = { success: true, data: data.filter(turn => turn.estado !== \"Pendiente\") };\r\n\r\n    } catch (err) {\r\n        console.dir({err});\r\n        turnsResponse = { success: false, message: err.message }\r\n    }\r\n\r\n    return turnsResponse;\r\n}"]},"metadata":{},"sourceType":"module"}