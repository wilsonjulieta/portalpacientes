{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport classnames from \"classnames\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\"; // @material-ui/icons\n\nimport Edit from \"@material-ui/icons/Edit\";\nimport Close from \"@material-ui/icons/Close\";\nimport Check from \"@material-ui/icons/Check\"; // core components\n\nimport styles from \"assets/jss/nextjs-material-dashboard/components/tasksStyle.js\";\nexport default function Tasks(props) {\n  const useStyles = makeStyles(styles);\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([...props.checkedIndexes]);\n\n  const handleToggle = value => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const {\n    tasksIndexes,\n    tasks,\n    rtlActive\n  } = props;\n  const tableCellClasses = classnames(classes.tableCell, {\n    [classes.tableCellRTL]: rtlActive\n  });\n  return /*#__PURE__*/_jsx(Table, {\n    className: classes.table,\n    children: /*#__PURE__*/_jsx(TableBody, {\n      children: tasksIndexes.map(value => /*#__PURE__*/_jsxs(TableRow, {\n        className: classes.tableRow,\n        children: [/*#__PURE__*/_jsx(TableCell, {\n          className: tableCellClasses,\n          children: /*#__PURE__*/_jsx(Checkbox, {\n            checked: checked.indexOf(value) !== -1,\n            tabIndex: -1,\n            onClick: () => handleToggle(value),\n            checkedIcon: /*#__PURE__*/_jsx(Check, {\n              className: classes.checkedIcon\n            }),\n            icon: /*#__PURE__*/_jsx(Check, {\n              className: classes.uncheckedIcon\n            }),\n            classes: {\n              checked: classes.checked,\n              root: classes.root\n            }\n          })\n        }), /*#__PURE__*/_jsx(TableCell, {\n          className: tableCellClasses,\n          children: tasks[value]\n        }), /*#__PURE__*/_jsxs(TableCell, {\n          className: classes.tableActions,\n          children: [/*#__PURE__*/_jsx(Tooltip, {\n            id: \"tooltip-top\",\n            title: \"Edit Task\",\n            placement: \"top\",\n            classes: {\n              tooltip: classes.tooltip\n            },\n            children: /*#__PURE__*/_jsx(IconButton, {\n              \"aria-label\": \"Edit\",\n              className: classes.tableActionButton,\n              children: /*#__PURE__*/_jsx(Edit, {\n                className: classes.tableActionButtonIcon + \" \" + classes.edit\n              })\n            })\n          }), /*#__PURE__*/_jsx(Tooltip, {\n            id: \"tooltip-top-start\",\n            title: \"Remove\",\n            placement: \"top\",\n            classes: {\n              tooltip: classes.tooltip\n            },\n            children: /*#__PURE__*/_jsx(IconButton, {\n              \"aria-label\": \"Close\",\n              className: classes.tableActionButton,\n              children: /*#__PURE__*/_jsx(Close, {\n                className: classes.tableActionButtonIcon + \" \" + classes.close\n              })\n            })\n          })]\n        })]\n      }, value))\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}